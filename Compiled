import UIKit

var score: Int = 0
var spaceship: Spaceship!
var obstacles: [Obstacle] = []
var powerUps: [PowerUp] = []

@propertyWrapper
struct SpeedLimit {
    private var value: CGFloat
    private let range: ClosedRange<CGFloat>

    var wrappedValue: CGFloat {
        get { return value }
        set { value = min(max(range.lowerBound, newValue), range.upperBound) }
    }

    init(wrappedValue: CGFloat, _ range: ClosedRange<CGFloat>) {
        self.value = wrappedValue
        self.range = range
    }
}

@SpeedLimit(wrappedValue: 1.0, 1...5)
var gameSpeed: CGFloat

class Spaceship {
    var position: CGPoint
    var velocity: CGPoint
    var acceleration: CGPoint
    let imageView: UIImageView

    init(position: CGPoint) {
        self.position = position
        self.velocity = CGPoint.zero
        self.acceleration = CGPoint.zero
        self.imageView = UIImageView(image: UIImage(named: "Cybertruck"))
        self.imageView.frame = CGRect(origin: position, size: CGSize(width: 50, height: 50))
    }

    func update(dt: CGFloat) {
        velocity.x += acceleration.x * dt
        velocity.y += acceleration.y * dt
        position.x += velocity.x * dt
        position.y += velocity.y * dt
        imageView.center = position
        acceleration = CGPoint.zero
    }

    func applyForce(_ force: @consuming CGPoint) {
        acceleration.x += force.x
        acceleration.y += force.y
    }
}

class Obstacle {
    var position: CGPoint
    let imageView: UIImageView

    init(position: CGPoint, imageName: String) {
        self.position = position
        self.imageView = UIImageView(image: UIImage(named: imageName))
        self.imageView.frame = CGRect(origin: position, size: CGSize(width: 50, height: 50))
    }

    func update() {
        position.x -= gameSpeed.wrappedValue
        imageView.center = position
    }

    func isOffScreen() -> Bool {
        return position.x < -imageView.frame.width
    }
}

class PowerUp {
    var position: CGPoint
    let imageView: UIImageView

    init(position: CGPoint, imageName: String) {
        self.position = position
        self.imageView = UIImageView(image: UIImage(named: imageName))
        self.imageView.frame = CGRect(origin: position, size: CGSize(width: 50, height: 50))
    }

    func update() {
        position.x -= gameSpeed.wrappedValue
        imageView.center = position
    }

    func isOffScreen() -> Bool {
        return position.x < -imageView.frame.width
    }
}

class GameScene: UIView {
    private var gameState: GameState = .stopped

    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }

    override init(frame: CGRect) {
        super.init(frame: frame)
        spaceship = Spaceship(position: CGPoint(x: self.bounds.midX, y: self.bounds.midY))
        self.addSubview(spaceship.imageView)
    }

    override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {
    spaceship.applyForce(CGPoint(x: 0, y: -1))
    
    if gameState == .playing {
        score += 1
    }
}


    func generateObstacle() {
        let randomY = CGFloat.random(in: 0...UIScreen.main.bounds.height)
        let obstacle = Obstacle(position: CGPoint(x: UIScreen.main.bounds.width, y: randomY), imageName: "obstacle Image")
        obstacles.append(obstacle)
        self.addSubview(obstacle.imageView)
    }

    func generatePowerUp() {
        let randomY = CGFloat.random(in: 0...UIScreen.main.bounds.height)
        let powerUp = PowerUp(position: CGPoint(x: UIScreen.main.bounds.width, y: randomY), imageName: "powerUpImage")
        powerUps.append(powerUp)
        self.addSubview(powerUp.imageView)
    }

    func gameLoop() {
        if gameState != .playing { return }

        let dt: CGFloat = 1.0 / 60.0
        spaceship.applyForce(CGPoint(x: 0, y: 0.05))
        spaceship.update(dt: dt)
        gameSpeed.wrappedValue += 0.0001

        if Int(CACurrentMediaTime()) % 3 == 0 {
            generateObstacle()
        }
        if Int(CACurrentMediaTime()) % 5 == 0 {
            generatePowerUp()
        }
        for (index, obstacle) in obstacles.enumerated().reversed() {
            obstacle.update()
            if obstacle.isOffScreen() {
                obstacles.remove(at: index)
                obstacle.imageView.removeFromSuperview()
            }
            if spaceship.imageView.frame.intersects(obstacle.imageView.frame) {
                gameState = .stopped
            }
        }
        for (index, powerUp) in powerUps.enumerated().reversed() {
            powerUp.update()
            if powerUp.isOffScreen() {
                powerUps.remove(at: index)
                powerUp.imageView.removeFromSuperview()
            }
            if spaceship.imageView.frame.intersects(powerUp.imageView.frame) {
                // Handle power up collection
            }
        }
    }

    func startGame() {
        gameState = .playing
    }

    func stopGame() {
        gameState = .stopped
    }
}

enum GameState {
    case playing, stopped
}

@main
struct GameEngine {
    static func main() {
        let gameScene = GameScene(frame: UIScreen.main.bounds)
        Timer.scheduledTimer(withTimeInterval: 1.0 / 60.0, repeats: true) { _ in
            gameScene.gameLoop()
        }
        gameScene.startGame()
    }
// MARK: - Game View Controller
class GameViewController: UIViewController {
    var gameScene: GameScene!
    var scoreLabel: UILabel!
    var startButton: UIButton!
    var stopButton: UIButton!

    override func viewDidLoad() {
        super.viewDidLoad()

        // Setup gameScene
        gameScene = GameScene(frame: view.bounds)
        view.addSubview(gameScene)
        
        // Setup scoreLabel
        scoreLabel = UILabel()
        scoreLabel.frame = CGRect(x: 20, y: 40, width: 200, height: 40)
        scoreLabel.text = "Score: \(score)"
        scoreLabel.textColor = .white
        view.addSubview(scoreLabel)

        // Setup startButton
        startButton = UIButton(type: .custom)
        startButton.frame = CGRect(x: 20, y: view.bounds.height - 60, width: 80, height: 40)
        startButton.setTitle("Start", for: .normal)
        startButton.backgroundColor = .green
        startButton.addTarget(self, action: #selector(startGame), for: .touchUpInside)
        view.addSubview(startButton)

        // Setup stopButton
        stopButton = UIButton(type: .custom)
        stopButton.frame = CGRect(x: view.bounds.width - 100, y: view.bounds.height - 60, width: 80, height: 40)
        stopButton.setTitle("Stop", for: .normal)
        stopButton.backgroundColor = .red
        stopButton.addTarget(self, action: #selector(stopGame), for: .touchUpInside)
        view.addSubview(stopButton)
        
        // Set up game loop timer
        Timer.scheduledTimer(withTimeInterval: 1.0 / 60.0, repeats: true) { [weak self] _ in
            self?.gameScene.gameLoop()
            self?.updateScoreLabel()
        }
    }

    @objc func startGame() {
        gameScene.startGame()
    }

    @objc func stopGame() {
        gameScene.stopGame()
    }

    func updateScoreLabel() {
        scoreLabel.text = "Score: \(score)"
    }
}

// MARK: - Home View Controller
class HomeViewController: UIViewController {
    var playNowButton: UIButton!

    override func viewDidLoad() {
        super.viewDidLoad()

        // Setup playNowButton
        playNowButton = UIButton(type: .custom)
        playNowButton.frame = CGRect(x: view.bounds.midX - 50, y: view.bounds.midY - 20, width: 100, height: 40)
        playNowButton.setTitle("Play Now", for: .normal)
        playNowButton.backgroundColor = .green
        playNowButton.addTarget(self, action: #selector(playNow), for: .touchUpInside)
        view.addSubview(playNowButton)
    }

    @objc func playNow() {
        let gameViewController = GameViewController()
        navigationController?.pushViewController(gameViewController, animated: true)
    }
}

// MARK: - Application Entry Point
@main
class GameEngine: UIResponder, UIApplicationDelegate {
    var window: UIWindow?

    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {
        let homeViewController = HomeViewController()
        let navigationController = UINavigationController(rootViewController: homeViewController)
        window = UIWindow(frame: UIScreen.main.bounds)
        window?.rootViewController = navigationController
        window?.makeKeyAndVisible()

        return true
    }
}





